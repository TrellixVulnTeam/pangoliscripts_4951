import { BigNumber } from '@ethersproject/bignumber';
import { SafeVersion } from '../contracts/config';
import GnosisSafeContractWeb3 from '../contracts/GnosisSafe/GnosisSafeContractWeb3';
import GnosisSafeProxyFactoryWeb3Contract from '../contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryWeb3Contract';
import MultiSendWeb3Contract from '../contracts/MultiSend/MultiSendWeb3Contract';
import { AbiItem } from '../types';
import EthAdapter, { EthAdapterTransaction, GetSafeContractProps } from './EthAdapter';
export interface Web3AdapterConfig {
    /** web3 - Web3 library */
    web3: any;
    /** signerAddress - Address of the signer */
    signerAddress: string;
}
declare class Web3Adapter implements EthAdapter {
    #private;
    constructor({ web3, signerAddress }: Web3AdapterConfig);
    isAddress(address: string): boolean;
    getBalance(address: string): Promise<BigNumber>;
    getChainId(): Promise<number>;
    getSafeContract({ safeVersion, chainId, isL1SafeMasterCopy, customContractAddress }: GetSafeContractProps): GnosisSafeContractWeb3;
    getMultiSendContract(safeVersion: SafeVersion, chainId: number, customContractAddress?: string): MultiSendWeb3Contract;
    getSafeProxyFactoryContract(safeVersion: SafeVersion, chainId: number, customContractAddress?: string): GnosisSafeProxyFactoryWeb3Contract;
    getContract(address: string, abi: AbiItem[]): any;
    getContractCode(address: string): Promise<string>;
    getTransaction(transactionHash: string): Promise<any>;
    getSignerAddress(): Promise<string>;
    signMessage(message: string): Promise<string>;
    estimateGas(transaction: EthAdapterTransaction, options?: string): Promise<number>;
    call(transaction: EthAdapterTransaction): Promise<string>;
}
export default Web3Adapter;
