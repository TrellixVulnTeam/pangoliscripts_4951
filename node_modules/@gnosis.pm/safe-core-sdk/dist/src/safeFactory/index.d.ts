import { SafeVersion } from '../contracts/config';
import EthAdapter from '../ethereumLibs/EthAdapter';
import Safe from '../Safe';
import { ContractNetworksConfig } from '../types';
export interface SafeAccountConfig {
    owners: string[];
    threshold: number;
    to?: string;
    data?: string;
    fallbackHandler?: string;
    paymentToken?: string;
    payment?: number;
    paymentReceiver?: string;
}
export interface SafeDeploymentConfig {
    saltNonce: number;
}
export interface SafeFactoryConfig {
    /** ethAdapter - Ethereum adapter */
    ethAdapter: EthAdapter;
    /** safeVersion - Versions of the Safe deployed by this Factory contract */
    safeVersion?: SafeVersion;
    /** isL1SafeMasterCopy - Forces to use the Gnosis Safe L1 version of the contract instead of the L2 version */
    isL1SafeMasterCopy?: boolean;
    /** contractNetworks - Contract network configuration */
    contractNetworks?: ContractNetworksConfig;
}
declare class SafeFactory {
    #private;
    static create({ ethAdapter, safeVersion, isL1SafeMasterCopy, contractNetworks }: SafeFactoryConfig): Promise<SafeFactory>;
    private init;
    getEthAdapter(): EthAdapter;
    getSafeVersion(): SafeVersion;
    getAddress(): string;
    getChainId(): Promise<number>;
    private encodeSetupCallData;
    deploySafe(safeAccountConfig: SafeAccountConfig, safeDeploymentConfig?: SafeDeploymentConfig): Promise<Safe>;
}
export default SafeFactory;
