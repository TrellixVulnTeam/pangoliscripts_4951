"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const bignumber_1 = require("@ethersproject/bignumber");
function toTxResult(promiEvent, options) {
    return new Promise((resolve, reject) => promiEvent
        .once('transactionHash', (hash) => resolve({ hash, promiEvent, options }))
        .catch(reject));
}
class GnosisSafeContractWeb3 {
    constructor(contract) {
        this.contract = contract;
    }
    async getVersion() {
        return this.contract.methods.VERSION().call();
    }
    getAddress() {
        return this.contract.options.address;
    }
    async getNonce() {
        return Number(await this.contract.methods.nonce().call());
    }
    async getThreshold() {
        return Number(await this.contract.methods.getThreshold().call());
    }
    async getOwners() {
        return this.contract.methods.getOwners().call();
    }
    async isOwner(address) {
        return this.contract.methods.isOwner(address).call();
    }
    async getTransactionHash(safeTransactionData) {
        return this.contract.methods
            .getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce)
            .call();
    }
    async approvedHashes(ownerAddress, hash) {
        return bignumber_1.BigNumber.from(await this.contract.methods.approvedHashes(ownerAddress, hash).call());
    }
    async approveHash(hash, options) {
        const txResponse = this.contract.methods.approveHash(hash).send(options);
        return toTxResult(txResponse, options);
    }
    async execTransaction(safeTransaction, options) {
        const txResponse = this.contract.methods
            .execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures())
            .send(options);
        return toTxResult(txResponse, options);
    }
    encode(methodName, params) {
        return this.contract.methods[methodName](...params).encodeABI();
    }
    async estimateGas(methodName, params, options) {
        return Number(await this.contract.methods[methodName](...params).estimateGas(options));
    }
}
exports.default = GnosisSafeContractWeb3;
//# sourceMappingURL=GnosisSafeContractWeb3.js.map